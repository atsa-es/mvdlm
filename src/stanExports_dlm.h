// Generated by rstantools.  Do not edit by hand.

/*
    zoid is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    zoid is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with zoid.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dlm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dlm");
    reader.add_event(178, 176, "end", "model_dlm");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dlm
  : public stan::model::model_base_crtp<model_dlm> {
private:
        int N;
        std::vector<int> y_indx;
        std::vector<double> y;
        std::vector<int> y_int;
        int nT;
        int fixed_N;
        int n_fixed_covars;
        std::vector<int> fixed_time_indx;
        std::vector<int> fixed_var_indx;
        std::vector<double> fixed_x_value;
        int varying_N;
        int n_varying_covars;
        std::vector<int> varying_time_indx;
        std::vector<int> varying_var_indx;
        std::vector<double> varying_x_value;
        int est_df;
        int family;
        int n_fixed_NAs;
        std::vector<int> fixed_NAs;
        int n_varying_NAs;
        std::vector<int> varying_NAs;
        int correlated_rw;
        vector_d zeros;
public:
    model_dlm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dlm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dlm_namespace::model_dlm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            validate_non_negative_index("y_indx", "N", N);
            context__.validate_dims("data initialization", "y_indx", "int", context__.to_vec(N));
            y_indx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y_indx");
            pos__ = 0;
            size_t y_indx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_indx_k_0_max__; ++k_0__) {
                y_indx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 4;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("y_int", "N", N);
            context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(N));
            y_int = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y_int");
            pos__ = 0;
            size_t y_int_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_int_k_0_max__; ++k_0__) {
                y_int[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "nT", "int", context__.to_vec());
            nT = int(0);
            vals_i__ = context__.vals_i("nT");
            pos__ = 0;
            nT = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "fixed_N", "int", context__.to_vec());
            fixed_N = int(0);
            vals_i__ = context__.vals_i("fixed_N");
            pos__ = 0;
            fixed_N = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_fixed_covars", "int", context__.to_vec());
            n_fixed_covars = int(0);
            vals_i__ = context__.vals_i("n_fixed_covars");
            pos__ = 0;
            n_fixed_covars = vals_i__[pos__++];
            current_statement_begin__ = 9;
            validate_non_negative_index("fixed_time_indx", "fixed_N", fixed_N);
            context__.validate_dims("data initialization", "fixed_time_indx", "int", context__.to_vec(fixed_N));
            fixed_time_indx = std::vector<int>(fixed_N, int(0));
            vals_i__ = context__.vals_i("fixed_time_indx");
            pos__ = 0;
            size_t fixed_time_indx_k_0_max__ = fixed_N;
            for (size_t k_0__ = 0; k_0__ < fixed_time_indx_k_0_max__; ++k_0__) {
                fixed_time_indx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("fixed_var_indx", "fixed_N", fixed_N);
            context__.validate_dims("data initialization", "fixed_var_indx", "int", context__.to_vec(fixed_N));
            fixed_var_indx = std::vector<int>(fixed_N, int(0));
            vals_i__ = context__.vals_i("fixed_var_indx");
            pos__ = 0;
            size_t fixed_var_indx_k_0_max__ = fixed_N;
            for (size_t k_0__ = 0; k_0__ < fixed_var_indx_k_0_max__; ++k_0__) {
                fixed_var_indx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("fixed_x_value", "fixed_N", fixed_N);
            context__.validate_dims("data initialization", "fixed_x_value", "double", context__.to_vec(fixed_N));
            fixed_x_value = std::vector<double>(fixed_N, double(0));
            vals_r__ = context__.vals_r("fixed_x_value");
            pos__ = 0;
            size_t fixed_x_value_k_0_max__ = fixed_N;
            for (size_t k_0__ = 0; k_0__ < fixed_x_value_k_0_max__; ++k_0__) {
                fixed_x_value[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "varying_N", "int", context__.to_vec());
            varying_N = int(0);
            vals_i__ = context__.vals_i("varying_N");
            pos__ = 0;
            varying_N = vals_i__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "n_varying_covars", "int", context__.to_vec());
            n_varying_covars = int(0);
            vals_i__ = context__.vals_i("n_varying_covars");
            pos__ = 0;
            n_varying_covars = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("varying_time_indx", "varying_N", varying_N);
            context__.validate_dims("data initialization", "varying_time_indx", "int", context__.to_vec(varying_N));
            varying_time_indx = std::vector<int>(varying_N, int(0));
            vals_i__ = context__.vals_i("varying_time_indx");
            pos__ = 0;
            size_t varying_time_indx_k_0_max__ = varying_N;
            for (size_t k_0__ = 0; k_0__ < varying_time_indx_k_0_max__; ++k_0__) {
                varying_time_indx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("varying_var_indx", "varying_N", varying_N);
            context__.validate_dims("data initialization", "varying_var_indx", "int", context__.to_vec(varying_N));
            varying_var_indx = std::vector<int>(varying_N, int(0));
            vals_i__ = context__.vals_i("varying_var_indx");
            pos__ = 0;
            size_t varying_var_indx_k_0_max__ = varying_N;
            for (size_t k_0__ = 0; k_0__ < varying_var_indx_k_0_max__; ++k_0__) {
                varying_var_indx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("varying_x_value", "varying_N", varying_N);
            context__.validate_dims("data initialization", "varying_x_value", "double", context__.to_vec(varying_N));
            varying_x_value = std::vector<double>(varying_N, double(0));
            vals_r__ = context__.vals_r("varying_x_value");
            pos__ = 0;
            size_t varying_x_value_k_0_max__ = varying_N;
            for (size_t k_0__ = 0; k_0__ < varying_x_value_k_0_max__; ++k_0__) {
                varying_x_value[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "est_df", "int", context__.to_vec());
            est_df = int(0);
            vals_i__ = context__.vals_i("est_df");
            pos__ = 0;
            est_df = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "n_fixed_NAs", "int", context__.to_vec());
            n_fixed_NAs = int(0);
            vals_i__ = context__.vals_i("n_fixed_NAs");
            pos__ = 0;
            n_fixed_NAs = vals_i__[pos__++];
            current_statement_begin__ = 20;
            validate_non_negative_index("fixed_NAs", "(n_fixed_NAs + 2)", (n_fixed_NAs + 2));
            context__.validate_dims("data initialization", "fixed_NAs", "int", context__.to_vec((n_fixed_NAs + 2)));
            fixed_NAs = std::vector<int>((n_fixed_NAs + 2), int(0));
            vals_i__ = context__.vals_i("fixed_NAs");
            pos__ = 0;
            size_t fixed_NAs_k_0_max__ = (n_fixed_NAs + 2);
            for (size_t k_0__ = 0; k_0__ < fixed_NAs_k_0_max__; ++k_0__) {
                fixed_NAs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "n_varying_NAs", "int", context__.to_vec());
            n_varying_NAs = int(0);
            vals_i__ = context__.vals_i("n_varying_NAs");
            pos__ = 0;
            n_varying_NAs = vals_i__[pos__++];
            current_statement_begin__ = 22;
            validate_non_negative_index("varying_NAs", "(n_varying_NAs + 2)", (n_varying_NAs + 2));
            context__.validate_dims("data initialization", "varying_NAs", "int", context__.to_vec((n_varying_NAs + 2)));
            varying_NAs = std::vector<int>((n_varying_NAs + 2), int(0));
            vals_i__ = context__.vals_i("varying_NAs");
            pos__ = 0;
            size_t varying_NAs_k_0_max__ = (n_varying_NAs + 2);
            for (size_t k_0__ = 0; k_0__ < varying_NAs_k_0_max__; ++k_0__) {
                varying_NAs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "correlated_rw", "int", context__.to_vec());
            correlated_rw = int(0);
            vals_i__ = context__.vals_i("correlated_rw");
            pos__ = 0;
            correlated_rw = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 26;
            validate_non_negative_index("zeros", "n_varying_covars", n_varying_covars);
            zeros = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_varying_covars);
            stan::math::fill(zeros, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 27;
            for (int i = 1; i <= n_varying_covars; ++i) {
                current_statement_begin__ = 27;
                stan::model::assign(zeros, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable zeros");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 30;
            validate_non_negative_index("b_fixed", "n_fixed_covars", n_fixed_covars);
            num_params_r__ += n_fixed_covars;
            current_statement_begin__ = 31;
            validate_non_negative_index("b_devs0", "n_varying_covars", n_varying_covars);
            num_params_r__ += n_varying_covars;
            current_statement_begin__ = 32;
            validate_non_negative_index("b_devs", "n_varying_covars", n_varying_covars);
            validate_non_negative_index("b_devs", "(nT - 1)", (nT - 1));
            num_params_r__ += (n_varying_covars * (nT - 1));
            current_statement_begin__ = 33;
            validate_non_negative_index("Lcorr", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            validate_non_negative_index("Lcorr", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            num_params_r__ += (((n_varying_covars * correlated_rw) * ((n_varying_covars * correlated_rw) - 1)) / 2);
            current_statement_begin__ = 34;
            validate_non_negative_index("sigma", "n_varying_covars", n_varying_covars);
            num_params_r__ += n_varying_covars;
            current_statement_begin__ = 35;
            validate_non_negative_index("phi", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            validate_non_negative_index("nu", "est_df", est_df);
            num_params_r__ += est_df;
            current_statement_begin__ = 37;
            validate_non_negative_index("missing_fixed", "n_fixed_NAs", n_fixed_NAs);
            num_params_r__ += n_fixed_NAs;
            current_statement_begin__ = 38;
            validate_non_negative_index("missing_varying", "n_varying_NAs", n_varying_NAs);
            num_params_r__ += n_varying_NAs;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dlm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 30;
        if (!(context__.contains_r("b_fixed")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_fixed missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_fixed");
        pos__ = 0U;
        validate_non_negative_index("b_fixed", "n_fixed_covars", n_fixed_covars);
        context__.validate_dims("parameter initialization", "b_fixed", "vector_d", context__.to_vec(n_fixed_covars));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fixed(n_fixed_covars);
        size_t b_fixed_j_1_max__ = n_fixed_covars;
        for (size_t j_1__ = 0; j_1__ < b_fixed_j_1_max__; ++j_1__) {
            b_fixed(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_fixed);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_fixed: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("b_devs0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_devs0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_devs0");
        pos__ = 0U;
        validate_non_negative_index("b_devs0", "n_varying_covars", n_varying_covars);
        context__.validate_dims("parameter initialization", "b_devs0", "vector_d", context__.to_vec(n_varying_covars));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_devs0(n_varying_covars);
        size_t b_devs0_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < b_devs0_j_1_max__; ++j_1__) {
            b_devs0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_devs0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_devs0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("b_devs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_devs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_devs");
        pos__ = 0U;
        validate_non_negative_index("b_devs", "n_varying_covars", n_varying_covars);
        validate_non_negative_index("b_devs", "(nT - 1)", (nT - 1));
        context__.validate_dims("parameter initialization", "b_devs", "vector_d", context__.to_vec((nT - 1),n_varying_covars));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > b_devs((nT - 1), Eigen::Matrix<double, Eigen::Dynamic, 1>(n_varying_covars));
        size_t b_devs_j_1_max__ = n_varying_covars;
        size_t b_devs_k_0_max__ = (nT - 1);
        for (size_t j_1__ = 0; j_1__ < b_devs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < b_devs_k_0_max__; ++k_0__) {
                b_devs[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t b_devs_i_0_max__ = (nT - 1);
        for (size_t i_0__ = 0; i_0__ < b_devs_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(b_devs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_devs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("Lcorr")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Lcorr missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Lcorr");
        pos__ = 0U;
        validate_non_negative_index("Lcorr", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
        validate_non_negative_index("Lcorr", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
        context__.validate_dims("parameter initialization", "Lcorr", "matrix_d", context__.to_vec((n_varying_covars * correlated_rw),(n_varying_covars * correlated_rw)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lcorr((n_varying_covars * correlated_rw), (n_varying_covars * correlated_rw));
        size_t Lcorr_j_2_max__ = (n_varying_covars * correlated_rw);
        size_t Lcorr_j_1_max__ = (n_varying_covars * correlated_rw);
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                Lcorr(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(Lcorr);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Lcorr: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "n_varying_covars", n_varying_covars);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(n_varying_covars));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(n_varying_covars);
        size_t sigma_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "1", 1);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(1);
        size_t phi_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "est_df", est_df);
        context__.validate_dims("parameter initialization", "nu", "vector_d", context__.to_vec(est_df));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu(est_df);
        size_t nu_j_1_max__ = est_df;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            nu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("missing_fixed")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable missing_fixed missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("missing_fixed");
        pos__ = 0U;
        validate_non_negative_index("missing_fixed", "n_fixed_NAs", n_fixed_NAs);
        context__.validate_dims("parameter initialization", "missing_fixed", "vector_d", context__.to_vec(n_fixed_NAs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> missing_fixed(n_fixed_NAs);
        size_t missing_fixed_j_1_max__ = n_fixed_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_fixed_j_1_max__; ++j_1__) {
            missing_fixed(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(missing_fixed);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable missing_fixed: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("missing_varying")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable missing_varying missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("missing_varying");
        pos__ = 0U;
        validate_non_negative_index("missing_varying", "n_varying_NAs", n_varying_NAs);
        context__.validate_dims("parameter initialization", "missing_varying", "vector_d", context__.to_vec(n_varying_NAs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> missing_varying(n_varying_NAs);
        size_t missing_varying_j_1_max__ = n_varying_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_varying_j_1_max__; ++j_1__) {
            missing_varying(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(missing_varying);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable missing_varying: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 30;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_fixed;
            (void) b_fixed;  // dummy to suppress unused var warning
            if (jacobian__)
                b_fixed = in__.vector_constrain(n_fixed_covars, lp__);
            else
                b_fixed = in__.vector_constrain(n_fixed_covars);
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_devs0;
            (void) b_devs0;  // dummy to suppress unused var warning
            if (jacobian__)
                b_devs0 = in__.vector_constrain(n_varying_covars, lp__);
            else
                b_devs0 = in__.vector_constrain(n_varying_covars);
            current_statement_begin__ = 32;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > b_devs;
            size_t b_devs_d_0_max__ = (nT - 1);
            b_devs.reserve(b_devs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < b_devs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    b_devs.push_back(in__.vector_constrain(n_varying_covars, lp__));
                else
                    b_devs.push_back(in__.vector_constrain(n_varying_covars));
            }
            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lcorr;
            (void) Lcorr;  // dummy to suppress unused var warning
            if (jacobian__)
                Lcorr = in__.cholesky_factor_corr_constrain((n_varying_covars * correlated_rw), lp__);
            else
                Lcorr = in__.cholesky_factor_corr_constrain((n_varying_covars * correlated_rw));
            current_statement_begin__ = 34;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, n_varying_covars, lp__);
            else
                sigma = in__.vector_lb_constrain(0, n_varying_covars);
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_lb_constrain(0, 1, lp__);
            else
                phi = in__.vector_lb_constrain(0, 1);
            current_statement_begin__ = 36;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lb_constrain(0, est_df, lp__);
            else
                nu = in__.vector_lb_constrain(0, est_df);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> missing_fixed;
            (void) missing_fixed;  // dummy to suppress unused var warning
            if (jacobian__)
                missing_fixed = in__.vector_constrain(n_fixed_NAs, lp__);
            else
                missing_fixed = in__.vector_constrain(n_fixed_NAs);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> missing_varying;
            (void) missing_varying;  // dummy to suppress unused var warning
            if (jacobian__)
                missing_varying = in__.vector_constrain(n_varying_NAs, lp__);
            else
                missing_varying = in__.vector_constrain(n_varying_NAs);
            // transformed parameters
            current_statement_begin__ = 41;
            validate_non_negative_index("b_varying", "n_varying_covars", n_varying_covars);
            validate_non_negative_index("b_varying", "nT", nT);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > b_varying(nT, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(n_varying_covars));
            stan::math::initialize(b_varying, DUMMY_VAR__);
            stan::math::fill(b_varying, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("R", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            validate_non_negative_index("R", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> R((n_varying_covars * correlated_rw), (n_varying_covars * correlated_rw));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("Sigma", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            validate_non_negative_index("Sigma", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma((n_varying_covars * correlated_rw), (n_varying_covars * correlated_rw));
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("eta", "nT", nT);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(nT);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("X_fixed", "nT", nT);
            validate_non_negative_index("X_fixed", "n_fixed_covars", n_fixed_covars);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_fixed(nT, n_fixed_covars);
            stan::math::initialize(X_fixed, DUMMY_VAR__);
            stan::math::fill(X_fixed, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("X_varying", "nT", nT);
            validate_non_negative_index("X_varying", "n_varying_covars", n_varying_covars);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_varying(nT, n_varying_covars);
            stan::math::initialize(X_varying, DUMMY_VAR__);
            stan::math::fill(X_varying, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 51;
            if (as_bool(logical_eq(correlated_rw, 1))) {
                current_statement_begin__ = 52;
                stan::math::assign(R, multiply_lower_tri_self_transpose(Lcorr));
                current_statement_begin__ = 53;
                stan::math::assign(Sigma, quad_form_diag(R, sigma));
            }
            current_statement_begin__ = 65;
            if (as_bool(logical_gt(n_fixed_covars, 0))) {
                current_statement_begin__ = 66;
                for (int i = 1; i <= fixed_N; ++i) {
                    current_statement_begin__ = 67;
                    stan::model::assign(X_fixed, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(fixed_time_indx, i, "fixed_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(fixed_var_indx, i, "fixed_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(fixed_x_value, i, "fixed_x_value", 1), 
                                "assigning variable X_fixed");
                }
                current_statement_begin__ = 70;
                for (int i = 1; i <= n_fixed_NAs; ++i) {
                    current_statement_begin__ = 71;
                    stan::model::assign(X_fixed, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(fixed_time_indx, get_base1(fixed_NAs, i, "fixed_NAs", 1), "fixed_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(fixed_var_indx, get_base1(fixed_NAs, i, "fixed_NAs", 1), "fixed_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(missing_fixed, i, "missing_fixed", 1), 
                                "assigning variable X_fixed");
                }
            }
            current_statement_begin__ = 74;
            if (as_bool(logical_gt(n_varying_covars, 0))) {
                current_statement_begin__ = 75;
                for (int i = 1; i <= varying_N; ++i) {
                    current_statement_begin__ = 76;
                    stan::model::assign(X_varying, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(varying_time_indx, i, "varying_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(varying_var_indx, i, "varying_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(varying_x_value, i, "varying_x_value", 1), 
                                "assigning variable X_varying");
                }
                current_statement_begin__ = 79;
                for (int i = 1; i <= n_varying_NAs; ++i) {
                    current_statement_begin__ = 80;
                    stan::model::assign(X_varying, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(varying_time_indx, get_base1(varying_NAs, i, "varying_NAs", 1), "varying_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(varying_var_indx, get_base1(varying_NAs, i, "varying_NAs", 1), "varying_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(missing_varying, i, "missing_varying", 1), 
                                "assigning variable X_varying");
                }
            }
            current_statement_begin__ = 85;
            stan::model::assign(b_varying, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        b_devs0, 
                        "assigning variable b_varying");
            current_statement_begin__ = 86;
            for (int t = 2; t <= nT; ++t) {
                current_statement_begin__ = 87;
                stan::model::assign(b_varying, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(get_base1(b_varying, (t - 1), "b_varying", 1), get_base1(b_devs, (t - 1), "b_devs", 1)), 
                            "assigning variable b_varying");
            }
            current_statement_begin__ = 91;
            for (int t = 1; t <= nT; ++t) {
                current_statement_begin__ = 91;
                stan::model::assign(eta, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable eta");
            }
            current_statement_begin__ = 92;
            if (as_bool(logical_gt(n_fixed_covars, 0))) {
                current_statement_begin__ = 92;
                stan::math::assign(eta, add(eta, multiply(X_fixed, b_fixed)));
            }
            current_statement_begin__ = 93;
            if (as_bool(logical_gt(n_varying_covars, 0))) {
                current_statement_begin__ = 94;
                for (int t = 1; t <= nT; ++t) {
                    current_statement_begin__ = 95;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (get_base1(eta, t, "eta", 1) + multiply(get_base1(X_varying, t, "X_varying", 1), get_base1(b_varying, t, "b_varying", 1))), 
                                "assigning variable eta");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 41;
            size_t b_varying_k_0_max__ = nT;
            size_t b_varying_j_1_max__ = n_varying_covars;
            for (size_t k_0__ = 0; k_0__ < b_varying_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < b_varying_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(b_varying[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b_varying" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_varying: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 44;
            size_t R_j_1_max__ = (n_varying_covars * correlated_rw);
            size_t R_j_2_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < R_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(R(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: R" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 45;
            size_t Sigma_j_1_max__ = (n_varying_covars * correlated_rw);
            size_t Sigma_j_2_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Sigma(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Sigma" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 46;
            size_t eta_j_1_max__ = nT;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 47;
            size_t X_fixed_j_1_max__ = nT;
            size_t X_fixed_j_2_max__ = n_fixed_covars;
            for (size_t j_1__ = 0; j_1__ < X_fixed_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < X_fixed_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(X_fixed(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_fixed" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X_fixed: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 48;
            size_t X_varying_j_1_max__ = nT;
            size_t X_varying_j_2_max__ = n_varying_covars;
            for (size_t j_1__ = 0; j_1__ < X_varying_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < X_varying_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(X_varying(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_varying" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X_varying: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 100;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 5));
            current_statement_begin__ = 101;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(Lcorr, 2.0));
            current_statement_begin__ = 102;
            lp_accum__.add(student_t_log<propto__>(phi, 3, 0, 2));
            current_statement_begin__ = 103;
            lp_accum__.add(normal_log<propto__>(b_fixed, 0, 1));
            current_statement_begin__ = 104;
            lp_accum__.add(student_t_log<propto__>(nu, 3, 0, 2));
            current_statement_begin__ = 106;
            lp_accum__.add(normal_log<propto__>(missing_fixed, 0, 1));
            current_statement_begin__ = 107;
            lp_accum__.add(normal_log<propto__>(missing_varying, 0, 1));
            current_statement_begin__ = 108;
            lp_accum__.add(normal_log<propto__>(b_devs0, 0, 1));
            current_statement_begin__ = 109;
            if (as_bool(logical_eq(est_df, 0))) {
                current_statement_begin__ = 110;
                if (as_bool(logical_eq(correlated_rw, 1))) {
                    current_statement_begin__ = 111;
                    for (int t = 1; t <= (nT - 1); ++t) {
                        current_statement_begin__ = 112;
                        lp_accum__.add(multi_normal_log<propto__>(get_base1(b_devs, t, "b_devs", 1), zeros, Sigma));
                    }
                } else {
                    current_statement_begin__ = 115;
                    for (int t = 1; t <= (nT - 1); ++t) {
                        current_statement_begin__ = 116;
                        lp_accum__.add(normal_log<propto__>(get_base1(b_devs, t, "b_devs", 1), zeros, sigma));
                    }
                }
            } else {
                current_statement_begin__ = 120;
                if (as_bool(logical_eq(correlated_rw, 1))) {
                    current_statement_begin__ = 121;
                    for (int t = 1; t <= (nT - 1); ++t) {
                        current_statement_begin__ = 122;
                        lp_accum__.add(multi_student_t_log<propto__>(get_base1(b_devs, t, "b_devs", 1), get_base1(nu, 1, "nu", 1), zeros, Sigma));
                    }
                } else {
                    current_statement_begin__ = 125;
                    for (int t = 1; t <= (nT - 1); ++t) {
                        current_statement_begin__ = 126;
                        lp_accum__.add(student_t_log<propto__>(get_base1(b_devs, t, "b_devs", 1), get_base1(nu, 1, "nu", 1), zeros, sigma));
                    }
                }
            }
            current_statement_begin__ = 131;
            if (as_bool(logical_eq(family, 1))) {
                current_statement_begin__ = 132;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 132;
                    lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)));
                }
            }
            current_statement_begin__ = 135;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 136;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 136;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1)));
                }
            }
            current_statement_begin__ = 139;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 140;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 140;
                    lp_accum__.add(poisson_log_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1)));
                }
            }
            current_statement_begin__ = 143;
            if (as_bool(logical_eq(family, 4))) {
                current_statement_begin__ = 144;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 144;
                    lp_accum__.add(neg_binomial_2_log_log<propto__>(get_base1(y_int, i, "y_int", 1), get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)));
                }
            }
            current_statement_begin__ = 147;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 148;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 148;
                    lp_accum__.add(gamma_log<propto__>(get_base1(y, i, "y", 1), get_base1(phi, 1, "phi", 1), (get_base1(phi, 1, "phi", 1) / stan::math::exp(get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1)))));
                }
            }
            current_statement_begin__ = 151;
            if (as_bool(logical_eq(family, 6))) {
                current_statement_begin__ = 152;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 152;
                    lp_accum__.add(lognormal_log<propto__>(get_base1(y, i, "y", 1), get_base1(eta, get_base1(y_indx, i, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b_fixed");
        names__.push_back("b_devs0");
        names__.push_back("b_devs");
        names__.push_back("Lcorr");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("nu");
        names__.push_back("missing_fixed");
        names__.push_back("missing_varying");
        names__.push_back("b_varying");
        names__.push_back("R");
        names__.push_back("Sigma");
        names__.push_back("eta");
        names__.push_back("X_fixed");
        names__.push_back("X_varying");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_fixed_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_varying_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nT - 1));
        dims__.push_back(n_varying_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_varying_covars * correlated_rw));
        dims__.push_back((n_varying_covars * correlated_rw));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_varying_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_df);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_fixed_NAs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_varying_NAs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dims__.push_back(n_varying_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_varying_covars * correlated_rw));
        dims__.push_back((n_varying_covars * correlated_rw));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_varying_covars * correlated_rw));
        dims__.push_back((n_varying_covars * correlated_rw));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dims__.push_back(n_fixed_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dims__.push_back(n_varying_covars);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dlm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fixed = in__.vector_constrain(n_fixed_covars);
        size_t b_fixed_j_1_max__ = n_fixed_covars;
        for (size_t j_1__ = 0; j_1__ < b_fixed_j_1_max__; ++j_1__) {
            vars__.push_back(b_fixed(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_devs0 = in__.vector_constrain(n_varying_covars);
        size_t b_devs0_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < b_devs0_j_1_max__; ++j_1__) {
            vars__.push_back(b_devs0(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > b_devs;
        size_t b_devs_d_0_max__ = (nT - 1);
        b_devs.reserve(b_devs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < b_devs_d_0_max__; ++d_0__) {
            b_devs.push_back(in__.vector_constrain(n_varying_covars));
        }
        size_t b_devs_j_1_max__ = n_varying_covars;
        size_t b_devs_k_0_max__ = (nT - 1);
        for (size_t j_1__ = 0; j_1__ < b_devs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < b_devs_k_0_max__; ++k_0__) {
                vars__.push_back(b_devs[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lcorr = in__.cholesky_factor_corr_constrain((n_varying_covars * correlated_rw));
        size_t Lcorr_j_2_max__ = (n_varying_covars * correlated_rw);
        size_t Lcorr_j_1_max__ = (n_varying_covars * correlated_rw);
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                vars__.push_back(Lcorr(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, n_varying_covars);
        size_t sigma_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.vector_lb_constrain(0, 1);
        size_t phi_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu = in__.vector_lb_constrain(0, est_df);
        size_t nu_j_1_max__ = est_df;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            vars__.push_back(nu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> missing_fixed = in__.vector_constrain(n_fixed_NAs);
        size_t missing_fixed_j_1_max__ = n_fixed_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_fixed_j_1_max__; ++j_1__) {
            vars__.push_back(missing_fixed(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> missing_varying = in__.vector_constrain(n_varying_NAs);
        size_t missing_varying_j_1_max__ = n_varying_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_varying_j_1_max__; ++j_1__) {
            vars__.push_back(missing_varying(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 41;
            validate_non_negative_index("b_varying", "n_varying_covars", n_varying_covars);
            validate_non_negative_index("b_varying", "nT", nT);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > b_varying(nT, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_varying_covars));
            stan::math::initialize(b_varying, DUMMY_VAR__);
            stan::math::fill(b_varying, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("R", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            validate_non_negative_index("R", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> R((n_varying_covars * correlated_rw), (n_varying_covars * correlated_rw));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("Sigma", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            validate_non_negative_index("Sigma", "(n_varying_covars * correlated_rw)", (n_varying_covars * correlated_rw));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma((n_varying_covars * correlated_rw), (n_varying_covars * correlated_rw));
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("eta", "nT", nT);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta(nT);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("X_fixed", "nT", nT);
            validate_non_negative_index("X_fixed", "n_fixed_covars", n_fixed_covars);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X_fixed(nT, n_fixed_covars);
            stan::math::initialize(X_fixed, DUMMY_VAR__);
            stan::math::fill(X_fixed, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("X_varying", "nT", nT);
            validate_non_negative_index("X_varying", "n_varying_covars", n_varying_covars);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X_varying(nT, n_varying_covars);
            stan::math::initialize(X_varying, DUMMY_VAR__);
            stan::math::fill(X_varying, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 51;
            if (as_bool(logical_eq(correlated_rw, 1))) {
                current_statement_begin__ = 52;
                stan::math::assign(R, multiply_lower_tri_self_transpose(Lcorr));
                current_statement_begin__ = 53;
                stan::math::assign(Sigma, quad_form_diag(R, sigma));
            }
            current_statement_begin__ = 65;
            if (as_bool(logical_gt(n_fixed_covars, 0))) {
                current_statement_begin__ = 66;
                for (int i = 1; i <= fixed_N; ++i) {
                    current_statement_begin__ = 67;
                    stan::model::assign(X_fixed, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(fixed_time_indx, i, "fixed_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(fixed_var_indx, i, "fixed_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(fixed_x_value, i, "fixed_x_value", 1), 
                                "assigning variable X_fixed");
                }
                current_statement_begin__ = 70;
                for (int i = 1; i <= n_fixed_NAs; ++i) {
                    current_statement_begin__ = 71;
                    stan::model::assign(X_fixed, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(fixed_time_indx, get_base1(fixed_NAs, i, "fixed_NAs", 1), "fixed_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(fixed_var_indx, get_base1(fixed_NAs, i, "fixed_NAs", 1), "fixed_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(missing_fixed, i, "missing_fixed", 1), 
                                "assigning variable X_fixed");
                }
            }
            current_statement_begin__ = 74;
            if (as_bool(logical_gt(n_varying_covars, 0))) {
                current_statement_begin__ = 75;
                for (int i = 1; i <= varying_N; ++i) {
                    current_statement_begin__ = 76;
                    stan::model::assign(X_varying, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(varying_time_indx, i, "varying_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(varying_var_indx, i, "varying_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(varying_x_value, i, "varying_x_value", 1), 
                                "assigning variable X_varying");
                }
                current_statement_begin__ = 79;
                for (int i = 1; i <= n_varying_NAs; ++i) {
                    current_statement_begin__ = 80;
                    stan::model::assign(X_varying, 
                                stan::model::cons_list(stan::model::index_uni(get_base1(varying_time_indx, get_base1(varying_NAs, i, "varying_NAs", 1), "varying_time_indx", 1)), stan::model::cons_list(stan::model::index_uni(get_base1(varying_var_indx, get_base1(varying_NAs, i, "varying_NAs", 1), "varying_var_indx", 1)), stan::model::nil_index_list())), 
                                get_base1(missing_varying, i, "missing_varying", 1), 
                                "assigning variable X_varying");
                }
            }
            current_statement_begin__ = 85;
            stan::model::assign(b_varying, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        b_devs0, 
                        "assigning variable b_varying");
            current_statement_begin__ = 86;
            for (int t = 2; t <= nT; ++t) {
                current_statement_begin__ = 87;
                stan::model::assign(b_varying, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            add(get_base1(b_varying, (t - 1), "b_varying", 1), get_base1(b_devs, (t - 1), "b_devs", 1)), 
                            "assigning variable b_varying");
            }
            current_statement_begin__ = 91;
            for (int t = 1; t <= nT; ++t) {
                current_statement_begin__ = 91;
                stan::model::assign(eta, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable eta");
            }
            current_statement_begin__ = 92;
            if (as_bool(logical_gt(n_fixed_covars, 0))) {
                current_statement_begin__ = 92;
                stan::math::assign(eta, add(eta, multiply(X_fixed, b_fixed)));
            }
            current_statement_begin__ = 93;
            if (as_bool(logical_gt(n_varying_covars, 0))) {
                current_statement_begin__ = 94;
                for (int t = 1; t <= nT; ++t) {
                    current_statement_begin__ = 95;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (get_base1(eta, t, "eta", 1) + multiply(get_base1(X_varying, t, "X_varying", 1), get_base1(b_varying, t, "b_varying", 1))), 
                                "assigning variable eta");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t b_varying_j_1_max__ = n_varying_covars;
                size_t b_varying_k_0_max__ = nT;
                for (size_t j_1__ = 0; j_1__ < b_varying_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < b_varying_k_0_max__; ++k_0__) {
                        vars__.push_back(b_varying[k_0__](j_1__));
                    }
                }
                size_t R_j_2_max__ = (n_varying_covars * correlated_rw);
                size_t R_j_1_max__ = (n_varying_covars * correlated_rw);
                for (size_t j_2__ = 0; j_2__ < R_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                        vars__.push_back(R(j_1__, j_2__));
                    }
                }
                size_t Sigma_j_2_max__ = (n_varying_covars * correlated_rw);
                size_t Sigma_j_1_max__ = (n_varying_covars * correlated_rw);
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                        vars__.push_back(Sigma(j_1__, j_2__));
                    }
                }
                size_t eta_j_1_max__ = nT;
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    vars__.push_back(eta(j_1__));
                }
                size_t X_fixed_j_2_max__ = n_fixed_covars;
                size_t X_fixed_j_1_max__ = nT;
                for (size_t j_2__ = 0; j_2__ < X_fixed_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < X_fixed_j_1_max__; ++j_1__) {
                        vars__.push_back(X_fixed(j_1__, j_2__));
                    }
                }
                size_t X_varying_j_2_max__ = n_varying_covars;
                size_t X_varying_j_1_max__ = nT;
                for (size_t j_2__ = 0; j_2__ < X_varying_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < X_varying_j_1_max__; ++j_1__) {
                        vars__.push_back(X_varying(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 157;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 158;
            if (as_bool(logical_eq(family, 1))) {
                current_statement_begin__ = 159;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 159;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, n, "y", 1), get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 161;
            if (as_bool(logical_eq(family, 2))) {
                current_statement_begin__ = 162;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 162;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                bernoulli_log(get_base1(y_int, n, "y_int", 1), inv_logit(get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 164;
            if (as_bool(logical_eq(family, 3))) {
                current_statement_begin__ = 165;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 165;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                poisson_log(get_base1(y_int, n, "y_int", 1), stan::math::exp(get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 167;
            if (as_bool(logical_eq(family, 4))) {
                current_statement_begin__ = 168;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 168;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_log(get_base1(y, n, "y", 1), get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 170;
            if (as_bool(logical_eq(family, 5))) {
                current_statement_begin__ = 171;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 171;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                gamma_log(get_base1(y, n, "y", 1), get_base1(phi, 1, "phi", 1), (get_base1(phi, 1, "phi", 1) / stan::math::exp(get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1)))), 
                                "assigning variable log_lik");
                }
            }
            current_statement_begin__ = 173;
            if (as_bool(logical_eq(family, 6))) {
                current_statement_begin__ = 174;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 174;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                lognormal_log(get_base1(y, n, "y", 1), get_base1(eta, get_base1(y_indx, n, "y_indx", 1), "eta", 1), get_base1(phi, 1, "phi", 1)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 157;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dlm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_fixed_j_1_max__ = n_fixed_covars;
        for (size_t j_1__ = 0; j_1__ < b_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_devs0_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < b_devs0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_devs0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_devs_j_1_max__ = n_varying_covars;
        size_t b_devs_k_0_max__ = (nT - 1);
        for (size_t j_1__ = 0; j_1__ < b_devs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < b_devs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_devs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Lcorr_j_2_max__ = (n_varying_covars * correlated_rw);
        size_t Lcorr_j_1_max__ = (n_varying_covars * correlated_rw);
        for (size_t j_2__ = 0; j_2__ < Lcorr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lcorr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = est_df;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t missing_fixed_j_1_max__ = n_fixed_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "missing_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t missing_varying_j_1_max__ = n_varying_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_varying_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "missing_varying" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t b_varying_j_1_max__ = n_varying_covars;
            size_t b_varying_k_0_max__ = nT;
            for (size_t j_1__ = 0; j_1__ < b_varying_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_varying_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_varying" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t R_j_2_max__ = (n_varying_covars * correlated_rw);
            size_t R_j_1_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_2__ = 0; j_2__ < R_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "R" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Sigma_j_2_max__ = (n_varying_covars * correlated_rw);
            size_t Sigma_j_1_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_j_1_max__ = nT;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t X_fixed_j_2_max__ = n_fixed_covars;
            size_t X_fixed_j_1_max__ = nT;
            for (size_t j_2__ = 0; j_2__ < X_fixed_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_fixed_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_fixed" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_varying_j_2_max__ = n_varying_covars;
            size_t X_varying_j_1_max__ = nT;
            for (size_t j_2__ = 0; j_2__ < X_varying_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_varying_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_varying" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_fixed_j_1_max__ = n_fixed_covars;
        for (size_t j_1__ = 0; j_1__ < b_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_devs0_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < b_devs0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_devs0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_devs_j_1_max__ = n_varying_covars;
        size_t b_devs_k_0_max__ = (nT - 1);
        for (size_t j_1__ = 0; j_1__ < b_devs_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < b_devs_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_devs" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Lcorr_j_1_max__ = (((n_varying_covars * correlated_rw) * ((n_varying_covars * correlated_rw) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < Lcorr_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lcorr" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_j_1_max__ = n_varying_covars;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = 1;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = est_df;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t missing_fixed_j_1_max__ = n_fixed_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_fixed_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "missing_fixed" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t missing_varying_j_1_max__ = n_varying_NAs;
        for (size_t j_1__ = 0; j_1__ < missing_varying_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "missing_varying" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t b_varying_j_1_max__ = n_varying_covars;
            size_t b_varying_k_0_max__ = nT;
            for (size_t j_1__ = 0; j_1__ < b_varying_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < b_varying_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_varying" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t R_j_2_max__ = (n_varying_covars * correlated_rw);
            size_t R_j_1_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_2__ = 0; j_2__ < R_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "R" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Sigma_j_2_max__ = (n_varying_covars * correlated_rw);
            size_t Sigma_j_1_max__ = (n_varying_covars * correlated_rw);
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_j_1_max__ = nT;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t X_fixed_j_2_max__ = n_fixed_covars;
            size_t X_fixed_j_1_max__ = nT;
            for (size_t j_2__ = 0; j_2__ < X_fixed_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_fixed_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_fixed" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_varying_j_2_max__ = n_varying_covars;
            size_t X_varying_j_1_max__ = nT;
            for (size_t j_2__ = 0; j_2__ < X_varying_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_varying_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_varying" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_dlm_namespace::model_dlm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
