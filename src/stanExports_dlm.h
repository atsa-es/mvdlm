// Generated by rstantools.  Do not edit by hand.

/*
    zoid is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    zoid is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with zoid.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_dlm_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 186> locations_array__ =
  {" (found before start of program)",
  " (in 'dlm', line 30, column 2 to column 33)",
  " (in 'dlm', line 31, column 2 to column 35)",
  " (in 'dlm', line 32, column 2 to column 40)",
  " (in 'dlm', line 33, column 2 to column 63)",
  " (in 'dlm', line 34, column 2 to column 42)",
  " (in 'dlm', line 35, column 2 to column 25)",
  " (in 'dlm', line 36, column 2 to column 29)",
  " (in 'dlm', line 37, column 2 to column 36)",
  " (in 'dlm', line 38, column 2 to column 40)",
  " (in 'dlm', line 41, column 2 to column 41)",
  " (in 'dlm', line 44, column 2 to column 79)",
  " (in 'dlm', line 45, column 2 to column 83)",
  " (in 'dlm', line 46, column 2 to column 17)",
  " (in 'dlm', line 47, column 2 to column 37)",
  " (in 'dlm', line 48, column 2 to column 41)",
  " (in 'dlm', line 151, column 2 to column 20)",
  " (in 'dlm', line 51, column 4 to column 49)",
  " (in 'dlm', line 52, column 4 to column 37)",
  " (in 'dlm', line 50, column 25 to line 53, column 3)",
  " (in 'dlm', line 50, column 2 to line 53, column 3)",
  " (in 'dlm', line 65, column 6 to column 72)",
  " (in 'dlm', line 64, column 24 to line 66, column 5)",
  " (in 'dlm', line 64, column 4 to line 66, column 5)",
  " (in 'dlm', line 69, column 6 to column 94)",
  " (in 'dlm', line 68, column 28 to line 70, column 5)",
  " (in 'dlm', line 68, column 4 to line 70, column 5)",
  " (in 'dlm', line 63, column 25 to line 71, column 3)",
  " (in 'dlm', line 63, column 2 to line 71, column 3)",
  " (in 'dlm', line 74, column 6 to column 80)",
  " (in 'dlm', line 73, column 26 to line 75, column 5)",
  " (in 'dlm', line 73, column 4 to line 75, column 5)",
  " (in 'dlm', line 78, column 6 to column 106)",
  " (in 'dlm', line 77, column 30 to line 79, column 5)",
  " (in 'dlm', line 77, column 4 to line 79, column 5)",
  " (in 'dlm', line 72, column 27 to line 80, column 3)",
  " (in 'dlm', line 72, column 2 to line 80, column 3)",
  " (in 'dlm', line 82, column 2 to column 25)",
  " (in 'dlm', line 84, column 4 to column 48)",
  " (in 'dlm', line 83, column 17 to line 85, column 3)",
  " (in 'dlm', line 83, column 2 to line 85, column 3)",
  " (in 'dlm', line 87, column 17 to column 28)",
  " (in 'dlm', line 87, column 2 to column 28)",
  " (in 'dlm', line 88, column 25 to column 55)",
  " (in 'dlm', line 88, column 2 to column 55)",
  " (in 'dlm', line 91, column 6 to column 52)",
  " (in 'dlm', line 90, column 19 to line 92, column 5)",
  " (in 'dlm', line 90, column 4 to line 92, column 5)",
  " (in 'dlm', line 89, column 27 to line 93, column 3)",
  " (in 'dlm', line 89, column 2 to line 93, column 3)",
  " (in 'dlm', line 153, column 19 to column 75)",
  " (in 'dlm', line 153, column 4 to column 75)",
  " (in 'dlm', line 152, column 16 to line 154, column 3)",
  " (in 'dlm', line 152, column 2 to line 154, column 3)",
  " (in 'dlm', line 156, column 19 to column 85)",
  " (in 'dlm', line 156, column 4 to column 85)",
  " (in 'dlm', line 155, column 16 to line 157, column 3)",
  " (in 'dlm', line 155, column 2 to line 157, column 3)",
  " (in 'dlm', line 159, column 19 to column 77)",
  " (in 'dlm', line 159, column 4 to column 77)",
  " (in 'dlm', line 158, column 16 to line 160, column 3)",
  " (in 'dlm', line 158, column 2 to line 160, column 3)",
  " (in 'dlm', line 162, column 19 to column 75)",
  " (in 'dlm', line 162, column 4 to column 75)",
  " (in 'dlm', line 161, column 16 to line 163, column 3)",
  " (in 'dlm', line 161, column 2 to line 163, column 3)",
  " (in 'dlm', line 165, column 19 to column 89)",
  " (in 'dlm', line 165, column 4 to column 89)",
  " (in 'dlm', line 164, column 16 to line 166, column 3)",
  " (in 'dlm', line 164, column 2 to line 166, column 3)",
  " (in 'dlm', line 168, column 19 to column 78)",
  " (in 'dlm', line 168, column 4 to column 78)",
  " (in 'dlm', line 167, column 16 to line 169, column 3)",
  " (in 'dlm', line 167, column 2 to line 169, column 3)",
  " (in 'dlm', line 96, column 2 to column 23)",
  " (in 'dlm', line 97, column 2 to column 33)",
  " (in 'dlm', line 98, column 2 to column 25)",
  " (in 'dlm', line 99, column 2 to column 24)",
  " (in 'dlm', line 100, column 2 to column 24)",
  " (in 'dlm', line 101, column 2 to column 30)",
  " (in 'dlm', line 102, column 2 to column 32)",
  " (in 'dlm', line 103, column 2 to column 24)",
  " (in 'dlm', line 121, column 8 to column 51)",
  " (in 'dlm', line 120, column 25 to line 122, column 7)",
  " (in 'dlm', line 120, column 6 to line 122, column 7)",
  " (in 'dlm', line 119, column 11 to line 123, column 5)",
  " (in 'dlm', line 117, column 8 to column 57)",
  " (in 'dlm', line 116, column 25 to line 118, column 7)",
  " (in 'dlm', line 116, column 6 to line 118, column 7)",
  " (in 'dlm', line 115, column 27 to line 119, column 5)",
  " (in 'dlm', line 115, column 4 to line 123, column 5)",
  " (in 'dlm', line 114, column 9 to line 124, column 3)",
  " (in 'dlm', line 111, column 8 to column 41)",
  " (in 'dlm', line 110, column 25 to line 112, column 7)",
  " (in 'dlm', line 110, column 6 to line 112, column 7)",
  " (in 'dlm', line 109, column 11 to line 113, column 5)",
  " (in 'dlm', line 107, column 8 to column 47)",
  " (in 'dlm', line 106, column 25 to line 108, column 7)",
  " (in 'dlm', line 106, column 6 to line 108, column 7)",
  " (in 'dlm', line 105, column 27 to line 109, column 5)",
  " (in 'dlm', line 105, column 4 to line 113, column 5)",
  " (in 'dlm', line 104, column 18 to line 114, column 3)",
  " (in 'dlm', line 104, column 2 to line 124, column 3)",
  " (in 'dlm', line 126, column 19 to column 57)",
  " (in 'dlm', line 126, column 4 to column 57)",
  " (in 'dlm', line 125, column 16 to line 128, column 3)",
  " (in 'dlm', line 125, column 2 to line 128, column 3)",
  " (in 'dlm', line 130, column 19 to column 62)",
  " (in 'dlm', line 130, column 4 to column 62)",
  " (in 'dlm', line 129, column 16 to line 132, column 3)",
  " (in 'dlm', line 129, column 2 to line 132, column 3)",
  " (in 'dlm', line 134, column 19 to column 58)",
  " (in 'dlm', line 134, column 4 to column 58)",
  " (in 'dlm', line 133, column 16 to line 136, column 3)",
  " (in 'dlm', line 133, column 2 to line 136, column 3)",
  " (in 'dlm', line 138, column 19 to column 73)",
  " (in 'dlm', line 138, column 4 to column 73)",
  " (in 'dlm', line 137, column 16 to line 140, column 3)",
  " (in 'dlm', line 137, column 2 to line 140, column 3)",
  " (in 'dlm', line 142, column 19 to column 71)",
  " (in 'dlm', line 142, column 4 to column 71)",
  " (in 'dlm', line 141, column 16 to line 144, column 3)",
  " (in 'dlm', line 141, column 2 to line 144, column 3)",
  " (in 'dlm', line 146, column 19 to column 60)",
  " (in 'dlm', line 146, column 4 to column 60)",
  " (in 'dlm', line 145, column 16 to line 148, column 3)",
  " (in 'dlm', line 145, column 2 to line 148, column 3)",
  " (in 'dlm', line 2, column 2 to column 8)",
  " (in 'dlm', line 3, column 13 to column 14)",
  " (in 'dlm', line 3, column 2 to column 16)",
  " (in 'dlm', line 4, column 9 to column 10)",
  " (in 'dlm', line 4, column 2 to column 12)",
  " (in 'dlm', line 5, column 12 to column 13)",
  " (in 'dlm', line 5, column 2 to column 15)",
  " (in 'dlm', line 6, column 2 to column 9)",
  " (in 'dlm', line 7, column 2 to column 14)",
  " (in 'dlm', line 8, column 2 to column 21)",
  " (in 'dlm', line 9, column 22 to column 29)",
  " (in 'dlm', line 9, column 2 to column 31)",
  " (in 'dlm', line 10, column 21 to column 28)",
  " (in 'dlm', line 10, column 2 to column 30)",
  " (in 'dlm', line 11, column 21 to column 28)",
  " (in 'dlm', line 11, column 2 to column 30)",
  " (in 'dlm', line 12, column 2 to column 16)",
  " (in 'dlm', line 13, column 2 to column 23)",
  " (in 'dlm', line 14, column 24 to column 33)",
  " (in 'dlm', line 14, column 2 to column 35)",
  " (in 'dlm', line 15, column 23 to column 32)",
  " (in 'dlm', line 15, column 2 to column 34)",
  " (in 'dlm', line 16, column 23 to column 32)",
  " (in 'dlm', line 16, column 2 to column 34)",
  " (in 'dlm', line 17, column 2 to column 13)",
  " (in 'dlm', line 18, column 2 to column 13)",
  " (in 'dlm', line 19, column 2 to column 18)",
  " (in 'dlm', line 20, column 16 to column 31)",
  " (in 'dlm', line 20, column 2 to column 33)",
  " (in 'dlm', line 21, column 2 to column 20)",
  " (in 'dlm', line 22, column 18 to column 35)",
  " (in 'dlm', line 22, column 2 to column 37)",
  " (in 'dlm', line 23, column 2 to column 20)",
  " (in 'dlm', line 26, column 9 to column 25)",
  " (in 'dlm', line 26, column 2 to column 33)",
  " (in 'dlm', line 27, column 31 to column 44)",
  " (in 'dlm', line 27, column 2 to column 44)",
  " (in 'dlm', line 30, column 9 to column 23)",
  " (in 'dlm', line 31, column 9 to column 25)",
  " (in 'dlm', line 32, column 34 to column 38)",
  " (in 'dlm', line 32, column 9 to column 25)",
  " (in 'dlm', line 33, column 23 to column 55)",
  " (in 'dlm', line 34, column 18 to column 34)",
  " (in 'dlm', line 35, column 18 to column 19)",
  " (in 'dlm', line 36, column 18 to column 24)",
  " (in 'dlm', line 37, column 9 to column 20)",
  " (in 'dlm', line 38, column 9 to column 22)",
  " (in 'dlm', line 41, column 37 to column 39)",
  " (in 'dlm', line 41, column 9 to column 25)",
  " (in 'dlm', line 44, column 9 to column 41)",
  " (in 'dlm', line 44, column 43 to column 75)",
  " (in 'dlm', line 45, column 9 to column 41)",
  " (in 'dlm', line 45, column 43 to column 75)",
  " (in 'dlm', line 46, column 9 to column 11)",
  " (in 'dlm', line 47, column 9 to column 11)",
  " (in 'dlm', line 47, column 13 to column 27)",
  " (in 'dlm', line 48, column 9 to column 11)",
  " (in 'dlm', line 48, column 13 to column 29)",
  " (in 'dlm', line 151, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_dlm final : public model_base_crtp<model_dlm> {
private:
  int N;
  std::vector<int> y_indx;
  std::vector<double> y;
  std::vector<int> y_int;
  int nT;
  int fixed_N;
  int n_fixed_covars;
  std::vector<int> fixed_time_indx;
  std::vector<int> fixed_var_indx;
  std::vector<double> fixed_x_value;
  int varying_N;
  int n_varying_covars;
  std::vector<int> varying_time_indx;
  std::vector<int> varying_var_indx;
  std::vector<double> varying_x_value;
  int est_df;
  int family;
  int n_fixed_NAs;
  std::vector<int> fixed_NAs;
  int n_varying_NAs;
  std::vector<int> varying_NAs;
  int correlated_rw;
  Eigen::Matrix<double,-1,1> zeros_data__;
  int b_devs_1dim__;
  int Lcorr_1dim__;
  int Lcorr_2dim__;
  int R_1dim__;
  int R_2dim__;
  int Sigma_1dim__;
  int Sigma_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> zeros{nullptr, 0};
public:
  ~model_dlm() {}
  model_dlm(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_dlm_namespace::model_dlm";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 127;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 127;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 128;
      stan::math::validate_non_negative_index("y_indx", "N", N);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "y_indx", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_indx = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 129;
      y_indx = context__.vals_i("y_indx");
      current_statement__ = 130;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 131;
      y = context__.vals_r("y");
      current_statement__ = 132;
      stan::math::validate_non_negative_index("y_int", "N", N);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "y_int", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_int = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 133;
      y_int = context__.vals_i("y_int");
      current_statement__ = 134;
      context__.validate_dims("data initialization", "nT", "int",
        std::vector<size_t>{});
      nT = std::numeric_limits<int>::min();
      current_statement__ = 134;
      nT = context__.vals_i("nT")[(1 - 1)];
      current_statement__ = 135;
      context__.validate_dims("data initialization", "fixed_N", "int",
        std::vector<size_t>{});
      fixed_N = std::numeric_limits<int>::min();
      current_statement__ = 135;
      fixed_N = context__.vals_i("fixed_N")[(1 - 1)];
      current_statement__ = 136;
      context__.validate_dims("data initialization", "n_fixed_covars", "int",
        std::vector<size_t>{});
      n_fixed_covars = std::numeric_limits<int>::min();
      current_statement__ = 136;
      n_fixed_covars = context__.vals_i("n_fixed_covars")[(1 - 1)];
      current_statement__ = 137;
      stan::math::validate_non_negative_index("fixed_time_indx", "fixed_N",
        fixed_N);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "fixed_time_indx",
        "int", std::vector<size_t>{static_cast<size_t>(fixed_N)});
      fixed_time_indx = std::vector<int>(fixed_N,
                          std::numeric_limits<int>::min());
      current_statement__ = 138;
      fixed_time_indx = context__.vals_i("fixed_time_indx");
      current_statement__ = 139;
      stan::math::validate_non_negative_index("fixed_var_indx", "fixed_N",
        fixed_N);
      current_statement__ = 140;
      context__.validate_dims("data initialization", "fixed_var_indx", "int",
        std::vector<size_t>{static_cast<size_t>(fixed_N)});
      fixed_var_indx = std::vector<int>(fixed_N,
                         std::numeric_limits<int>::min());
      current_statement__ = 140;
      fixed_var_indx = context__.vals_i("fixed_var_indx");
      current_statement__ = 141;
      stan::math::validate_non_negative_index("fixed_x_value", "fixed_N",
        fixed_N);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "fixed_x_value",
        "double", std::vector<size_t>{static_cast<size_t>(fixed_N)});
      fixed_x_value = std::vector<double>(fixed_N,
                        std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 142;
      fixed_x_value = context__.vals_r("fixed_x_value");
      current_statement__ = 143;
      context__.validate_dims("data initialization", "varying_N", "int",
        std::vector<size_t>{});
      varying_N = std::numeric_limits<int>::min();
      current_statement__ = 143;
      varying_N = context__.vals_i("varying_N")[(1 - 1)];
      current_statement__ = 144;
      context__.validate_dims("data initialization", "n_varying_covars",
        "int", std::vector<size_t>{});
      n_varying_covars = std::numeric_limits<int>::min();
      current_statement__ = 144;
      n_varying_covars = context__.vals_i("n_varying_covars")[(1 - 1)];
      current_statement__ = 145;
      stan::math::validate_non_negative_index("varying_time_indx",
        "varying_N", varying_N);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "varying_time_indx",
        "int", std::vector<size_t>{static_cast<size_t>(varying_N)});
      varying_time_indx = std::vector<int>(varying_N,
                            std::numeric_limits<int>::min());
      current_statement__ = 146;
      varying_time_indx = context__.vals_i("varying_time_indx");
      current_statement__ = 147;
      stan::math::validate_non_negative_index("varying_var_indx",
        "varying_N", varying_N);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "varying_var_indx",
        "int", std::vector<size_t>{static_cast<size_t>(varying_N)});
      varying_var_indx = std::vector<int>(varying_N,
                           std::numeric_limits<int>::min());
      current_statement__ = 148;
      varying_var_indx = context__.vals_i("varying_var_indx");
      current_statement__ = 149;
      stan::math::validate_non_negative_index("varying_x_value", "varying_N",
        varying_N);
      current_statement__ = 150;
      context__.validate_dims("data initialization", "varying_x_value",
        "double", std::vector<size_t>{static_cast<size_t>(varying_N)});
      varying_x_value = std::vector<double>(varying_N,
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 150;
      varying_x_value = context__.vals_r("varying_x_value");
      current_statement__ = 151;
      context__.validate_dims("data initialization", "est_df", "int",
        std::vector<size_t>{});
      est_df = std::numeric_limits<int>::min();
      current_statement__ = 151;
      est_df = context__.vals_i("est_df")[(1 - 1)];
      current_statement__ = 152;
      context__.validate_dims("data initialization", "family", "int",
        std::vector<size_t>{});
      family = std::numeric_limits<int>::min();
      current_statement__ = 152;
      family = context__.vals_i("family")[(1 - 1)];
      current_statement__ = 153;
      context__.validate_dims("data initialization", "n_fixed_NAs", "int",
        std::vector<size_t>{});
      n_fixed_NAs = std::numeric_limits<int>::min();
      current_statement__ = 153;
      n_fixed_NAs = context__.vals_i("n_fixed_NAs")[(1 - 1)];
      current_statement__ = 154;
      stan::math::validate_non_negative_index("fixed_NAs", "n_fixed_NAs + 2",
        (n_fixed_NAs + 2));
      current_statement__ = 155;
      context__.validate_dims("data initialization", "fixed_NAs", "int",
        std::vector<size_t>{static_cast<size_t>((n_fixed_NAs + 2))});
      fixed_NAs = std::vector<int>((n_fixed_NAs + 2),
                    std::numeric_limits<int>::min());
      current_statement__ = 155;
      fixed_NAs = context__.vals_i("fixed_NAs");
      current_statement__ = 156;
      context__.validate_dims("data initialization", "n_varying_NAs", "int",
        std::vector<size_t>{});
      n_varying_NAs = std::numeric_limits<int>::min();
      current_statement__ = 156;
      n_varying_NAs = context__.vals_i("n_varying_NAs")[(1 - 1)];
      current_statement__ = 157;
      stan::math::validate_non_negative_index("varying_NAs",
        "n_varying_NAs + 2", (n_varying_NAs + 2));
      current_statement__ = 158;
      context__.validate_dims("data initialization", "varying_NAs", "int",
        std::vector<size_t>{static_cast<size_t>((n_varying_NAs + 2))});
      varying_NAs = std::vector<int>((n_varying_NAs + 2),
                      std::numeric_limits<int>::min());
      current_statement__ = 158;
      varying_NAs = context__.vals_i("varying_NAs");
      current_statement__ = 159;
      context__.validate_dims("data initialization", "correlated_rw", "int",
        std::vector<size_t>{});
      correlated_rw = std::numeric_limits<int>::min();
      current_statement__ = 159;
      correlated_rw = context__.vals_i("correlated_rw")[(1 - 1)];
      current_statement__ = 160;
      stan::math::validate_non_negative_index("zeros", "n_varying_covars",
        n_varying_covars);
      current_statement__ = 161;
      zeros_data__ = Eigen::Matrix<double,-1,1>::Constant(n_varying_covars,
                       std::numeric_limits<double>::quiet_NaN());
      new (&zeros)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(zeros_data__.data(),
        n_varying_covars);
      current_statement__ = 163;
      for (int i = 1; i <= n_varying_covars; ++i) {
        current_statement__ = 162;
        stan::model::assign(zeros, 0, "assigning variable zeros",
          stan::model::index_uni(i));
      }
      current_statement__ = 164;
      stan::math::validate_non_negative_index("b_fixed", "n_fixed_covars",
        n_fixed_covars);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("b_devs0", "n_varying_covars",
        n_varying_covars);
      current_statement__ = 166;
      b_devs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 166;
      b_devs_1dim__ = (nT - 1);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("b_devs", "nT - 1",
        b_devs_1dim__);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("b_devs", "n_varying_covars",
        n_varying_covars);
      current_statement__ = 168;
      Lcorr_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 168;
      Lcorr_1dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("Lcorr",
        "n_varying_covars * correlated_rw", Lcorr_1dim__);
      current_statement__ = 168;
      Lcorr_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 168;
      Lcorr_2dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("Lcorr",
        "n_varying_covars * correlated_rw", Lcorr_2dim__);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("sigma", "n_varying_covars",
        n_varying_covars);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("phi", "1", 1);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("nu", "est_df", est_df);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("missing_fixed", "n_fixed_NAs",
        n_fixed_NAs);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("missing_varying",
        "n_varying_NAs", n_varying_NAs);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("b_varying", "nT", nT);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("b_varying",
        "n_varying_covars", n_varying_covars);
      current_statement__ = 176;
      R_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 176;
      R_1dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("R",
        "n_varying_covars * correlated_rw", R_1dim__);
      current_statement__ = 177;
      R_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 177;
      R_2dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("R",
        "n_varying_covars * correlated_rw", R_2dim__);
      current_statement__ = 178;
      Sigma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 178;
      Sigma_1dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("Sigma",
        "n_varying_covars * correlated_rw", Sigma_1dim__);
      current_statement__ = 179;
      Sigma_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 179;
      Sigma_2dim__ = (n_varying_covars * correlated_rw);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("Sigma",
        "n_varying_covars * correlated_rw", Sigma_2dim__);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("eta", "nT", nT);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("X_fixed", "nT", nT);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("X_fixed", "n_fixed_covars",
        n_fixed_covars);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("X_varying", "nT", nT);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("X_varying",
        "n_varying_covars", n_varying_covars);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_fixed_covars + n_varying_covars + (b_devs_1dim__ *
      n_varying_covars) + ((Lcorr_1dim__ * (Lcorr_1dim__ - 1)) / 2) +
      n_varying_covars + 1 + est_df + n_fixed_NAs + n_varying_NAs;
  }
  inline std::string model_name() const final {
    return "model_dlm";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_dlm_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> b_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_covars,
          DUMMY_VAR__);
      current_statement__ = 1;
      b_fixed = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_covars);
      Eigen::Matrix<local_scalar_t__,-1,1> b_devs0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      current_statement__ = 2;
      b_devs0 = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_covars);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b_devs =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(b_devs_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
            DUMMY_VAR__));
      current_statement__ = 3;
      b_devs = in__.template read<
                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(b_devs_1dim__,
                 n_varying_covars);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Lcorr_1dim__,
          Lcorr_2dim__, DUMMY_VAR__);
      current_statement__ = 4;
      Lcorr = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Lcorr_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_varying_covars);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 6;
      phi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 1);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_df, DUMMY_VAR__);
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             est_df);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_NAs,
          DUMMY_VAR__);
      current_statement__ = 8;
      missing_fixed = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_NAs);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_varying =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_NAs,
          DUMMY_VAR__);
      current_statement__ = 9;
      missing_varying = in__.template read<
                          Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_NAs);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b_varying =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(nT,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
            DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,-1> R =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(R_1dim__, R_2dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Sigma =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Sigma_1dim__,
          Sigma_2dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nT, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> X_fixed =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nT, n_fixed_covars,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> X_varying =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(nT, n_varying_covars,
          DUMMY_VAR__);
      current_statement__ = 20;
      if (stan::math::logical_eq(correlated_rw, 1)) {
        current_statement__ = 17;
        stan::model::assign(R,
          stan::math::multiply_lower_tri_self_transpose(Lcorr),
          "assigning variable R");
        current_statement__ = 18;
        stan::model::assign(Sigma, stan::math::quad_form_diag(R, sigma),
          "assigning variable Sigma");
      }
      current_statement__ = 28;
      if (stan::math::logical_gt(n_fixed_covars, 0)) {
        current_statement__ = 23;
        for (int i = 1; i <= fixed_N; ++i) {
          current_statement__ = 21;
          stan::model::assign(X_fixed,
            stan::model::rvalue(fixed_x_value, "fixed_x_value",
              stan::model::index_uni(i)), "assigning variable X_fixed",
            stan::model::index_uni(
              stan::model::rvalue(fixed_time_indx, "fixed_time_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(fixed_var_indx, "fixed_var_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 26;
        for (int i = 1; i <= n_fixed_NAs; ++i) {
          current_statement__ = 24;
          stan::model::assign(X_fixed,
            stan::model::rvalue(missing_fixed, "missing_fixed",
              stan::model::index_uni(i)), "assigning variable X_fixed",
            stan::model::index_uni(
              stan::model::rvalue(fixed_time_indx, "fixed_time_indx",
                stan::model::index_uni(
                  stan::model::rvalue(fixed_NAs, "fixed_NAs",
                    stan::model::index_uni(i))))),
            stan::model::index_uni(
              stan::model::rvalue(fixed_var_indx, "fixed_var_indx",
                stan::model::index_uni(
                  stan::model::rvalue(fixed_NAs, "fixed_NAs",
                    stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 36;
      if (stan::math::logical_gt(n_varying_covars, 0)) {
        current_statement__ = 31;
        for (int i = 1; i <= varying_N; ++i) {
          current_statement__ = 29;
          stan::model::assign(X_varying,
            stan::model::rvalue(varying_x_value, "varying_x_value",
              stan::model::index_uni(i)), "assigning variable X_varying",
            stan::model::index_uni(
              stan::model::rvalue(varying_time_indx, "varying_time_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(varying_var_indx, "varying_var_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 34;
        for (int i = 1; i <= n_varying_NAs; ++i) {
          current_statement__ = 32;
          stan::model::assign(X_varying,
            stan::model::rvalue(missing_varying, "missing_varying",
              stan::model::index_uni(i)), "assigning variable X_varying",
            stan::model::index_uni(
              stan::model::rvalue(varying_time_indx, "varying_time_indx",
                stan::model::index_uni(
                  stan::model::rvalue(varying_NAs, "varying_NAs",
                    stan::model::index_uni(i))))),
            stan::model::index_uni(
              stan::model::rvalue(varying_var_indx, "varying_var_indx",
                stan::model::index_uni(
                  stan::model::rvalue(varying_NAs, "varying_NAs",
                    stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 37;
      stan::model::assign(b_varying, b_devs0, "assigning variable b_varying",
        stan::model::index_uni(1));
      current_statement__ = 40;
      for (int t = 2; t <= nT; ++t) {
        current_statement__ = 38;
        stan::model::assign(b_varying,
          stan::math::add(
            stan::model::deep_copy(
              stan::model::rvalue(b_varying, "b_varying",
                stan::model::index_uni((t - 1)))),
            stan::model::rvalue(b_devs, "b_devs",
              stan::model::index_uni((t - 1)))),
          "assigning variable b_varying", stan::model::index_uni(t));
      }
      current_statement__ = 42;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 41;
        stan::model::assign(eta, 0, "assigning variable eta",
          stan::model::index_uni(t));
      }
      current_statement__ = 44;
      if (stan::math::logical_gt(n_fixed_covars, 0)) {
        current_statement__ = 43;
        stan::model::assign(eta,
          stan::math::add(stan::model::deep_copy(eta),
            stan::math::multiply(X_fixed, b_fixed)), "assigning variable eta");
      }
      current_statement__ = 49;
      if (stan::math::logical_gt(n_varying_covars, 0)) {
        current_statement__ = 47;
        for (int t = 1; t <= nT; ++t) {
          current_statement__ = 45;
          stan::model::assign(eta,
            (stan::model::rvalue(eta, "eta", stan::model::index_uni(t)) +
            stan::math::multiply(
              stan::model::rvalue(X_varying, "X_varying",
                stan::model::index_uni(t)),
              stan::model::rvalue(b_varying, "b_varying",
                stan::model::index_uni(t)))), "assigning variable eta",
            stan::model::index_uni(t));
        }
      }
      {
        current_statement__ = 74;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 5));
        current_statement__ = 75;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(Lcorr,
                         2.0));
        current_statement__ = 76;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(phi, 3, 0, 2));
        current_statement__ = 77;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_fixed, 0, 1));
        current_statement__ = 78;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(nu, 3, 0, 2));
        current_statement__ = 79;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(missing_fixed, 0, 1));
        current_statement__ = 80;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(missing_varying, 0,
                         1));
        current_statement__ = 81;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b_devs0, 0, 1));
        current_statement__ = 102;
        if (stan::math::logical_eq(est_df, 0)) {
          current_statement__ = 100;
          if (stan::math::logical_eq(correlated_rw, 1)) {
            current_statement__ = 98;
            for (int t = 1; t <= (nT - 1); ++t) {
              current_statement__ = 96;
              lp_accum__.add(stan::math::multi_normal_lpdf<propto__>(
                               stan::model::rvalue(b_devs, "b_devs",
                                 stan::model::index_uni(t)), zeros, Sigma));
            }
          } else {
            current_statement__ = 94;
            for (int t = 1; t <= (nT - 1); ++t) {
              current_statement__ = 92;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(b_devs, "b_devs",
                                 stan::model::index_uni(t)), zeros, sigma));
            }
          }
        } else {
          current_statement__ = 90;
          if (stan::math::logical_eq(correlated_rw, 1)) {
            current_statement__ = 88;
            for (int t = 1; t <= (nT - 1); ++t) {
              current_statement__ = 86;
              lp_accum__.add(stan::math::multi_student_t_lpdf<propto__>(
                               stan::model::rvalue(b_devs, "b_devs",
                                 stan::model::index_uni(t)),
                               stan::model::rvalue(nu, "nu",
                                 stan::model::index_uni(1)), zeros, Sigma));
            }
          } else {
            current_statement__ = 84;
            for (int t = 1; t <= (nT - 1); ++t) {
              current_statement__ = 82;
              lp_accum__.add(stan::math::student_t_lpdf<propto__>(
                               stan::model::rvalue(b_devs, "b_devs",
                                 stan::model::index_uni(t)),
                               stan::model::rvalue(nu, "nu",
                                 stan::model::index_uni(1)), zeros, sigma));
            }
          }
        }
        current_statement__ = 106;
        if (stan::math::logical_eq(family, 1)) {
          current_statement__ = 104;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 103;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(
                                 stan::model::rvalue(y_indx, "y_indx",
                                   stan::model::index_uni(i)))),
                             stan::model::rvalue(phi, "phi",
                               stan::model::index_uni(1))));
          }
        }
        current_statement__ = 110;
        if (stan::math::logical_eq(family, 2)) {
          current_statement__ = 108;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 107;
            lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(
                                 stan::model::rvalue(y_indx, "y_indx",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 114;
        if (stan::math::logical_eq(family, 3)) {
          current_statement__ = 112;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 111;
            lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(
                                 stan::model::rvalue(y_indx, "y_indx",
                                   stan::model::index_uni(i))))));
          }
        }
        current_statement__ = 118;
        if (stan::math::logical_eq(family, 4)) {
          current_statement__ = 116;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 115;
            lp_accum__.add(stan::math::neg_binomial_2_log_lpmf<propto__>(
                             stan::model::rvalue(y_int, "y_int",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(
                                 stan::model::rvalue(y_indx, "y_indx",
                                   stan::model::index_uni(i)))),
                             stan::model::rvalue(phi, "phi",
                               stan::model::index_uni(1))));
          }
        }
        current_statement__ = 122;
        if (stan::math::logical_eq(family, 5)) {
          current_statement__ = 120;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 119;
            lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(phi, "phi",
                               stan::model::index_uni(1)),
                             (stan::model::rvalue(phi, "phi",
                                stan::model::index_uni(1)) /
                             stan::math::exp(
                               stan::model::rvalue(eta, "eta",
                                 stan::model::index_uni(
                                   stan::model::rvalue(y_indx, "y_indx",
                                     stan::model::index_uni(i))))))));
          }
        }
        current_statement__ = 126;
        if (stan::math::logical_eq(family, 6)) {
          current_statement__ = 124;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 123;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(eta, "eta",
                               stan::model::index_uni(
                                 stan::model::rvalue(y_indx, "y_indx",
                                   stan::model::index_uni(i)))),
                             stan::model::rvalue(phi, "phi",
                               stan::model::index_uni(1))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_dlm_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> b_fixed =
        Eigen::Matrix<double,-1,1>::Constant(n_fixed_covars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      b_fixed = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_covars);
      Eigen::Matrix<double,-1,1> b_devs0 =
        Eigen::Matrix<double,-1,1>::Constant(n_varying_covars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      b_devs0 = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_covars);
      std::vector<Eigen::Matrix<double,-1,1>> b_devs =
        std::vector<Eigen::Matrix<double,-1,1>>(b_devs_1dim__,
          Eigen::Matrix<double,-1,1>::Constant(n_varying_covars,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      b_devs = in__.template read<
                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(b_devs_1dim__,
                 n_varying_covars);
      Eigen::Matrix<double,-1,-1> Lcorr =
        Eigen::Matrix<double,-1,-1>::Constant(Lcorr_1dim__, Lcorr_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      Lcorr = in__.template read_constrain_cholesky_factor_corr<
                Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                Lcorr_2dim__);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(n_varying_covars,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_varying_covars);
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(1,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      phi = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, 1);
      Eigen::Matrix<double,-1,1> nu =
        Eigen::Matrix<double,-1,1>::Constant(est_df,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      nu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             est_df);
      Eigen::Matrix<double,-1,1> missing_fixed =
        Eigen::Matrix<double,-1,1>::Constant(n_fixed_NAs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      missing_fixed = in__.template read<
                        Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_NAs);
      Eigen::Matrix<double,-1,1> missing_varying =
        Eigen::Matrix<double,-1,1>::Constant(n_varying_NAs,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      missing_varying = in__.template read<
                          Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_NAs);
      std::vector<Eigen::Matrix<double,-1,1>> b_varying =
        std::vector<Eigen::Matrix<double,-1,1>>(nT,
          Eigen::Matrix<double,-1,1>::Constant(n_varying_covars,
            std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,-1> R =
        Eigen::Matrix<double,-1,-1>::Constant(R_1dim__, R_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Sigma =
        Eigen::Matrix<double,-1,-1>::Constant(Sigma_1dim__, Sigma_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(nT,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> X_fixed =
        Eigen::Matrix<double,-1,-1>::Constant(nT, n_fixed_covars,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> X_varying =
        Eigen::Matrix<double,-1,-1>::Constant(nT, n_varying_covars,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(b_fixed);
      out__.write(b_devs0);
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= b_devs_1dim__; ++sym2__) {
          out__.write(b_devs[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(Lcorr);
      out__.write(sigma);
      out__.write(phi);
      out__.write(nu);
      out__.write(missing_fixed);
      out__.write(missing_varying);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 20;
      if (stan::math::logical_eq(correlated_rw, 1)) {
        current_statement__ = 17;
        stan::model::assign(R,
          stan::math::multiply_lower_tri_self_transpose(Lcorr),
          "assigning variable R");
        current_statement__ = 18;
        stan::model::assign(Sigma, stan::math::quad_form_diag(R, sigma),
          "assigning variable Sigma");
      }
      current_statement__ = 28;
      if (stan::math::logical_gt(n_fixed_covars, 0)) {
        current_statement__ = 23;
        for (int i = 1; i <= fixed_N; ++i) {
          current_statement__ = 21;
          stan::model::assign(X_fixed,
            stan::model::rvalue(fixed_x_value, "fixed_x_value",
              stan::model::index_uni(i)), "assigning variable X_fixed",
            stan::model::index_uni(
              stan::model::rvalue(fixed_time_indx, "fixed_time_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(fixed_var_indx, "fixed_var_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 26;
        for (int i = 1; i <= n_fixed_NAs; ++i) {
          current_statement__ = 24;
          stan::model::assign(X_fixed,
            stan::model::rvalue(missing_fixed, "missing_fixed",
              stan::model::index_uni(i)), "assigning variable X_fixed",
            stan::model::index_uni(
              stan::model::rvalue(fixed_time_indx, "fixed_time_indx",
                stan::model::index_uni(
                  stan::model::rvalue(fixed_NAs, "fixed_NAs",
                    stan::model::index_uni(i))))),
            stan::model::index_uni(
              stan::model::rvalue(fixed_var_indx, "fixed_var_indx",
                stan::model::index_uni(
                  stan::model::rvalue(fixed_NAs, "fixed_NAs",
                    stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 36;
      if (stan::math::logical_gt(n_varying_covars, 0)) {
        current_statement__ = 31;
        for (int i = 1; i <= varying_N; ++i) {
          current_statement__ = 29;
          stan::model::assign(X_varying,
            stan::model::rvalue(varying_x_value, "varying_x_value",
              stan::model::index_uni(i)), "assigning variable X_varying",
            stan::model::index_uni(
              stan::model::rvalue(varying_time_indx, "varying_time_indx",
                stan::model::index_uni(i))),
            stan::model::index_uni(
              stan::model::rvalue(varying_var_indx, "varying_var_indx",
                stan::model::index_uni(i))));
        }
        current_statement__ = 34;
        for (int i = 1; i <= n_varying_NAs; ++i) {
          current_statement__ = 32;
          stan::model::assign(X_varying,
            stan::model::rvalue(missing_varying, "missing_varying",
              stan::model::index_uni(i)), "assigning variable X_varying",
            stan::model::index_uni(
              stan::model::rvalue(varying_time_indx, "varying_time_indx",
                stan::model::index_uni(
                  stan::model::rvalue(varying_NAs, "varying_NAs",
                    stan::model::index_uni(i))))),
            stan::model::index_uni(
              stan::model::rvalue(varying_var_indx, "varying_var_indx",
                stan::model::index_uni(
                  stan::model::rvalue(varying_NAs, "varying_NAs",
                    stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 37;
      stan::model::assign(b_varying, b_devs0, "assigning variable b_varying",
        stan::model::index_uni(1));
      current_statement__ = 40;
      for (int t = 2; t <= nT; ++t) {
        current_statement__ = 38;
        stan::model::assign(b_varying,
          stan::math::add(
            stan::model::deep_copy(
              stan::model::rvalue(b_varying, "b_varying",
                stan::model::index_uni((t - 1)))),
            stan::model::rvalue(b_devs, "b_devs",
              stan::model::index_uni((t - 1)))),
          "assigning variable b_varying", stan::model::index_uni(t));
      }
      current_statement__ = 42;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 41;
        stan::model::assign(eta, 0, "assigning variable eta",
          stan::model::index_uni(t));
      }
      current_statement__ = 44;
      if (stan::math::logical_gt(n_fixed_covars, 0)) {
        current_statement__ = 43;
        stan::model::assign(eta,
          stan::math::add(stan::model::deep_copy(eta),
            stan::math::multiply(X_fixed, b_fixed)), "assigning variable eta");
      }
      current_statement__ = 49;
      if (stan::math::logical_gt(n_varying_covars, 0)) {
        current_statement__ = 47;
        for (int t = 1; t <= nT; ++t) {
          current_statement__ = 45;
          stan::model::assign(eta,
            (stan::model::rvalue(eta, "eta", stan::model::index_uni(t)) +
            stan::math::multiply(
              stan::model::rvalue(X_varying, "X_varying",
                stan::model::index_uni(t)),
              stan::model::rvalue(b_varying, "b_varying",
                stan::model::index_uni(t)))), "assigning variable eta",
            stan::model::index_uni(t));
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
            out__.write(b_varying[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(R);
        out__.write(Sigma);
        out__.write(eta);
        out__.write(X_fixed);
        out__.write(X_varying);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 53;
      if (stan::math::logical_eq(family, 1)) {
        current_statement__ = 51;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 50;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_uni(
                  stan::model::rvalue(y_indx, "y_indx",
                    stan::model::index_uni(n)))),
              stan::model::rvalue(phi, "phi", stan::model::index_uni(1))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 57;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 55;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 54;
          stan::model::assign(log_lik,
            stan::math::bernoulli_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::inv_logit(
                stan::model::rvalue(eta, "eta",
                  stan::model::index_uni(
                    stan::model::rvalue(y_indx, "y_indx",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 61;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 59;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 58;
          stan::model::assign(log_lik,
            stan::math::poisson_lpmf<false>(
              stan::model::rvalue(y_int, "y_int", stan::model::index_uni(n)),
              stan::math::exp(
                stan::model::rvalue(eta, "eta",
                  stan::model::index_uni(
                    stan::model::rvalue(y_indx, "y_indx",
                      stan::model::index_uni(n)))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 65;
      if (stan::math::logical_eq(family, 4)) {
        current_statement__ = 63;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 62;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_uni(
                  stan::model::rvalue(y_indx, "y_indx",
                    stan::model::index_uni(n)))),
              stan::model::rvalue(phi, "phi", stan::model::index_uni(1))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 69;
      if (stan::math::logical_eq(family, 5)) {
        current_statement__ = 67;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 66;
          stan::model::assign(log_lik,
            stan::math::gamma_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(phi, "phi", stan::model::index_uni(1)),
              (stan::model::rvalue(phi, "phi", stan::model::index_uni(1)) /
              stan::math::exp(
                stan::model::rvalue(eta, "eta",
                  stan::model::index_uni(
                    stan::model::rvalue(y_indx, "y_indx",
                      stan::model::index_uni(n))))))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      current_statement__ = 73;
      if (stan::math::logical_eq(family, 6)) {
        current_statement__ = 71;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 70;
          stan::model::assign(log_lik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(n)),
              stan::model::rvalue(eta, "eta",
                stan::model::index_uni(
                  stan::model::rvalue(y_indx, "y_indx",
                    stan::model::index_uni(n)))),
              stan::model::rvalue(phi, "phi", stan::model::index_uni(1))),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> b_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_covars,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(b_fixed,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_covars),
        "assigning variable b_fixed");
      out__.write(b_fixed);
      Eigen::Matrix<local_scalar_t__,-1,1> b_devs0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(b_devs0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_covars),
        "assigning variable b_devs0");
      out__.write(b_devs0);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b_devs =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(b_devs_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
            DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= b_devs_1dim__; ++sym2__) {
          current_statement__ = 3;
          stan::model::assign(b_devs, in__.read<local_scalar_t__>(),
            "assigning variable b_devs", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(b_devs);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Lcorr_1dim__,
          Lcorr_2dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(Lcorr,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(Lcorr_1dim__,
          Lcorr_2dim__), "assigning variable Lcorr");
      out__.write_free_cholesky_factor_corr(Lcorr);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_covars),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(phi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(1),
        "assigning variable phi");
      out__.write_free_lb(0, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_df, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(est_df),
        "assigning variable nu");
      out__.write_free_lb(0, nu);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_NAs,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(missing_fixed,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_fixed_NAs),
        "assigning variable missing_fixed");
      out__.write(missing_fixed);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_varying =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_NAs,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(missing_varying,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_varying_NAs),
        "assigning variable missing_varying");
      out__.write(missing_varying);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "b_fixed",
        "double", std::vector<size_t>{static_cast<size_t>(n_fixed_covars)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "b_devs0",
        "double", std::vector<size_t>{static_cast<size_t>(n_varying_covars)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "b_devs", "double",
        std::vector<size_t>{static_cast<size_t>(b_devs_1dim__),
          static_cast<size_t>(n_varying_covars)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "Lcorr", "double",
        std::vector<size_t>{static_cast<size_t>(Lcorr_1dim__),
          static_cast<size_t>(Lcorr_2dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(n_varying_covars)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(1)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{static_cast<size_t>(est_df)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "missing_fixed",
        "double", std::vector<size_t>{static_cast<size_t>(n_fixed_NAs)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "missing_varying",
        "double", std::vector<size_t>{static_cast<size_t>(n_varying_NAs)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> b_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_covars,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_fixed_flat__;
        current_statement__ = 1;
        b_fixed_flat__ = context__.vals_r("b_fixed");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_fixed_covars; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(b_fixed, b_fixed_flat__[(pos__ - 1)],
            "assigning variable b_fixed", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b_fixed);
      Eigen::Matrix<local_scalar_t__,-1,1> b_devs0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> b_devs0_flat__;
        current_statement__ = 2;
        b_devs0_flat__ = context__.vals_r("b_devs0");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(b_devs0, b_devs0_flat__[(pos__ - 1)],
            "assigning variable b_devs0", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(b_devs0);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b_devs =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(b_devs_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> b_devs_flat__;
        current_statement__ = 3;
        b_devs_flat__ = context__.vals_r("b_devs");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= b_devs_1dim__; ++sym2__) {
            current_statement__ = 3;
            stan::model::assign(b_devs, b_devs_flat__[(pos__ - 1)],
              "assigning variable b_devs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(b_devs);
      Eigen::Matrix<local_scalar_t__,-1,-1> Lcorr =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Lcorr_1dim__,
          Lcorr_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Lcorr_flat__;
        current_statement__ = 4;
        Lcorr_flat__ = context__.vals_r("Lcorr");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Lcorr_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= Lcorr_1dim__; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(Lcorr, Lcorr_flat__[(pos__ - 1)],
              "assigning variable Lcorr", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(Lcorr);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_covars,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 5;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 6;
        phi_flat__ = context__.vals_r("phi");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(phi, phi_flat__[(pos__ - 1)],
            "assigning variable phi", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, phi);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(est_df, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_flat__;
        current_statement__ = 7;
        nu_flat__ = context__.vals_r("nu");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= est_df; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(nu, nu_flat__[(pos__ - 1)],
            "assigning variable nu", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, nu);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_fixed =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_fixed_NAs,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> missing_fixed_flat__;
        current_statement__ = 8;
        missing_fixed_flat__ = context__.vals_r("missing_fixed");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= n_fixed_NAs; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(missing_fixed, missing_fixed_flat__[(pos__ -
            1)], "assigning variable missing_fixed",
            stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(missing_fixed);
      Eigen::Matrix<local_scalar_t__,-1,1> missing_varying =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_varying_NAs,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> missing_varying_flat__;
        current_statement__ = 9;
        missing_varying_flat__ = context__.vals_r("missing_varying");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_varying_NAs; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(missing_varying, missing_varying_flat__[(pos__
            - 1)], "assigning variable missing_varying",
            stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(missing_varying);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"b_fixed", "b_devs0", "b_devs",
                "Lcorr", "sigma", "phi", "nu", "missing_fixed",
                "missing_varying"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"b_varying", "R", "Sigma", "eta", "X_fixed", "X_varying"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_fixed_covars)},
                std::vector<size_t>{static_cast<size_t>(n_varying_covars)},
                std::vector<size_t>{static_cast<size_t>(b_devs_1dim__),
                  static_cast<size_t>(n_varying_covars)},
                std::vector<size_t>{static_cast<size_t>(Lcorr_1dim__),
                  static_cast<size_t>(Lcorr_2dim__)},
                std::vector<size_t>{static_cast<size_t>(n_varying_covars)},
                std::vector<size_t>{static_cast<size_t>(1)},
                std::vector<size_t>{static_cast<size_t>(est_df)},
                std::vector<size_t>{static_cast<size_t>(n_fixed_NAs)},
                std::vector<size_t>{static_cast<size_t>(n_varying_NAs)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(nT),
               static_cast<size_t>(n_varying_covars)},
             std::vector<size_t>{static_cast<size_t>(R_1dim__),
               static_cast<size_t>(R_2dim__)},
             std::vector<size_t>{static_cast<size_t>(Sigma_1dim__),
               static_cast<size_t>(Sigma_2dim__)},
             std::vector<size_t>{static_cast<size_t>(nT)},
             std::vector<size_t>{static_cast<size_t>(nT),
               static_cast<size_t>(n_fixed_covars)},
             std::vector<size_t>{static_cast<size_t>(nT),
               static_cast<size_t>(n_varying_covars)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_fixed_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_fixed" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_devs0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= b_devs_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_devs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= Lcorr_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= Lcorr_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "Lcorr" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_df; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_fixed_NAs; ++sym1__) {
      param_names__.emplace_back(std::string() + "missing_fixed" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_NAs; ++sym1__) {
      param_names__.emplace_back(std::string() + "missing_varying" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_varying" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= R_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "R" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_fixed_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_fixed" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_varying" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_fixed_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_fixed" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "b_devs0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= b_devs_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "b_devs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ((Lcorr_1dim__ * (Lcorr_1dim__ - 1)) /
         2); ++sym1__) {
      param_names__.emplace_back(std::string() + "Lcorr" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= est_df; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_fixed_NAs; ++sym1__) {
      param_names__.emplace_back(std::string() + "missing_fixed" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_varying_NAs; ++sym1__) {
      param_names__.emplace_back(std::string() + "missing_varying" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_varying" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= R_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= R_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "R" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= Sigma_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Sigma_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "Sigma" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_fixed_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_fixed" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_varying_covars; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nT; ++sym2__) {
          param_names__.emplace_back(std::string() + "X_varying" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"b_fixed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_fixed_covars) + "},\"block\":\"parameters\"},{\"name\":\"b_devs0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "},\"block\":\"parameters\"},{\"name\":\"b_devs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(b_devs_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Lcorr_1dim__) + ",\"cols\":" + std::to_string(Lcorr_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_df) + "},\"block\":\"parameters\"},{\"name\":\"missing_fixed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_fixed_NAs) + "},\"block\":\"parameters\"},{\"name\":\"missing_varying\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_NAs) + "},\"block\":\"parameters\"},{\"name\":\"b_varying\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nT) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R_1dim__) + ",\"cols\":" + std::to_string(R_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_1dim__) + ",\"cols\":" + std::to_string(Sigma_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nT) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X_fixed\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nT) + ",\"cols\":" + std::to_string(n_fixed_covars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X_varying\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nT) + ",\"cols\":" + std::to_string(n_varying_covars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"b_fixed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_fixed_covars) + "},\"block\":\"parameters\"},{\"name\":\"b_devs0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "},\"block\":\"parameters\"},{\"name\":\"b_devs\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(b_devs_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((Lcorr_1dim__ * (Lcorr_1dim__ - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(1) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(est_df) + "},\"block\":\"parameters\"},{\"name\":\"missing_fixed\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_fixed_NAs) + "},\"block\":\"parameters\"},{\"name\":\"missing_varying\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_NAs) + "},\"block\":\"parameters\"},{\"name\":\"b_varying\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nT) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_varying_covars) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R_1dim__) + ",\"cols\":" + std::to_string(R_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Sigma_1dim__) + ",\"cols\":" + std::to_string(Sigma_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nT) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X_fixed\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nT) + ",\"cols\":" + std::to_string(n_fixed_covars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"X_varying\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nT) + ",\"cols\":" + std::to_string(n_varying_covars) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((n_fixed_covars + n_varying_covars) +
      (b_devs_1dim__ * n_varying_covars)) + (Lcorr_1dim__ * Lcorr_2dim__)) +
      n_varying_covars) + 1) + est_df) + n_fixed_NAs) + n_varying_NAs);
    const size_t num_transformed = emit_transformed_parameters * (((((((nT *
      n_varying_covars) + (R_1dim__ * R_2dim__)) + (Sigma_1dim__ *
      Sigma_2dim__)) + nT) + (nT * n_fixed_covars)) + (nT *
      n_varying_covars)));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((n_fixed_covars + n_varying_covars) +
      (b_devs_1dim__ * n_varying_covars)) + (Lcorr_1dim__ * Lcorr_2dim__)) +
      n_varying_covars) + 1) + est_df) + n_fixed_NAs) + n_varying_NAs);
    const size_t num_transformed = emit_transformed_parameters * (((((((nT *
      n_varying_covars) + (R_1dim__ * R_2dim__)) + (Sigma_1dim__ *
      Sigma_2dim__)) + nT) + (nT * n_fixed_covars)) + (nT *
      n_varying_covars)));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_dlm_namespace::model_dlm;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_dlm_namespace::profiles__;
}
#endif
#endif
